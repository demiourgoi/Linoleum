/*
 * This source file was generated by the Gradle 'init' task
 */
package es.ucm.fdi.linoleum.tools.simreplayer

import kotlinx.serialization.Serializable
import kotlinx.serialization.json.Json
import kotlinx.serialization.encodeToString

import java.nio.file.Path
import java.io.Closeable

import java.util.concurrent.ConcurrentLinkedQueue
import java.util.concurrent.CountDownLatch
import java.util.concurrent.Executors
import java.util.concurrent.ScheduledExecutorService
import java.util.concurrent.TimeUnit

import org.slf4j.Logger
import org.slf4j.LoggerFactory

import io.opentelemetry.api.OpenTelemetry
import io.opentelemetry.sdk.autoconfigure.AutoConfiguredOpenTelemetrySdk
import io.opentelemetry.api.common.AttributeKey
import io.opentelemetry.context.Context
import io.opentelemetry.context.ContextKey
import io.opentelemetry.api.trace.Span
import io.opentelemetry.api.trace.SpanKind
import io.opentelemetry.api.trace.StatusCode
import io.opentelemetry.api.trace.Tracer
import io.opentelemetry.context.Scope
import java.time.Duration
import java.util.concurrent.Callable
import java.util.concurrent.ScheduledFuture
import java.util.concurrent.ConcurrentHashMap

private const val SCOPE_NAME = "es.ucm.fdi.linoleum.tools.simreplayer"
private const val SCOPE_VERSION = "0.1.0"
private const val SCOPE_SCHEMA_URL = "https://demiourgoi.github.io"

/** A simulated trace span
 * See https://opentelemetry.io/docs/concepts/signals/traces/
 *
 * @property parentId Identifier of the span that is the parent of this span, or null if
 * this is a root span. We implictily assume the parent is a span of the same trace
 * as spanId.traceId
 * @property startTimeOffsetNs How much time (in nanoseconds) to wait since the start of the replay to start this span. The parent
 * trace is created on its first span
 * @property durationNs How much time (in nanoseconds) to wait since the span is created to close the span. Spans
 * involved in a SimSpanTree wait both for this duration and for their children spans to terminate.
 * https://github.com/envoyproxy/envoy/issues/21583
 * */
@Serializable
data class SimSpan(
    val spanId: SpanId, val parentId: String?,
    val spanName: String, val spanKind: SpanKind=SpanKind.INTERNAL,
    val startTimeOffsetNs: Long,
    val durationNs: Long,
    val attributes: Map<String, String> = emptyMap()) {

    companion object {
        fun fromJsonStr(jsonStr: String): Result<SimSpan> =
            runCatching {  Json.decodeFromString<SimSpan>(jsonStr) }
    }

    // In this case the parent id has no information, as both should
    // have the same trace id
    val isRootSpan = parentId == null

    fun toJsonStr(): String = Json.encodeToString(this)

    fun start(tracer: Tracer, context: Context): Span {
        val spanBuilder = tracer
            .spanBuilder(spanName)
            .setSpanKind(spanKind)
        if (!isRootSpan) {
            spanBuilder.setParent(context)
        }
        attributes.forEach{ entry ->
            spanBuilder.setAttribute(entry.key, entry.value)
        }
        val span = spanBuilder.startSpan()
        // FIXME not clear this is required
        // FIXME to companion for this class
        waitForSpanRecording(span)
        return span
    }

}

data class Tree<T>(
    val root: T, val children: List<Tree<T>>
)
/**
 * Per https://opentelemetry.io/docs/concepts/signals/traces/ there is only one root span in a
 * trace, that represents the action that started the trace
 * See also https://grafana.com/docs/tempo/latest/introduction/
 * */
typealias SimSpanTree = Tree<SimSpan>
fun simSpanTree(spans: List<SimSpan>): SimSpanTree {
    val rootSpan = spans.first{ it.isRootSpan }
    // TODO find parent and resolve children, traversing the trace graph
    return Tree(rootSpan, emptyList())
}


/**
 * Identifier of a span in the simulation. These are arbitrary ids that won't be respected when emitting
 * the trace as the OTEL SDK will autogenerate new trace and span ids
 * A SimSpanId with an empty spanId is used for the parentId of the first span of a trace.
 * */
@Serializable
data class SpanId(val traceId: String, val spanId: String)

class SpanSimFilePlayer(
    private val tracer: Tracer,
    private val scheduler: ScheduledExecutorService = DEFAULT_NEW_SCHEDULER(),
    private val logger: Logger = LoggerFactory.getLogger(SpanSimFilePlayer::class.java.name)
) : Closeable {

    companion object {
        // https://stackoverflow.com/questions/763579/how-many-threads-can-a-java-vm-support
        // https://stackoverflow.com/questions/7726871/maximum-number-of-threads-in-a-jvm
        private const val MAX_THREAD_POOL_SIZE_ENV_VAR = "MAX_THREAD_POOL_SIZE"
        private val MAX_THREAD_POOL_SIZE = (System.getenv(MAX_THREAD_POOL_SIZE_ENV_VAR) ?: "5000").toInt()
        private val SCHEDULER_TERMINATION_TIMEOUT = Duration.ofSeconds(10)
        private val DEFAULT_NEW_SCHEDULER = {
            Executors.newScheduledThreadPool(
                MAX_THREAD_POOL_SIZE
            ) { r: Runnable ->
                val thread = Thread(r)
                // so it doesn't block JVM shutdown
                // Java closes on Ctrl+C by default https://stackoverflow.com/questions/1611931/catching-ctrlc-in-java
                thread.isDaemon = true
                thread
            }
        }
    }
    /**
     * TODO assumptions
     * @return The list of actual span ids generated by OTEL, or an error instead
     * */
    fun playSim(path: Path): Result<List<SpanId>>{
        val lines = path.toFile().readLines()
        val spanResults = lines.map{SimSpan.fromJsonStr(it)}
        val parseFailures = spanResults.filter{it.isFailure}
        return when {
            parseFailures.isNotEmpty() -> parseFailures.first().map{ emptyList() }
            else -> playSim(spanResults.successes)
        }
    }

    /*
* TODO for reaply
* - order by time: be explicit about assumption of whether or not we allow spans to happen at the same millis
* - create trace on first span found; also handle wait for next span. Grouping by trace and short the spans in advance
*   might be useful. Consider using some kind of executor service for this
* - signal errors due to spans emitted late: log to mark this
* - Create unit test with an OTEL provider that does nothing: detect spans emitted late with a mock logger. Usa
* https://mockk.io/ for idiomatic mocking
* * Precondition: each SimSpanId is unique in a simulation file. spanName doesn't need to be
* * Precondition: each trace has a single root span that is a span with null parentId.spanId, that is also
* the span with lowest startTimeOffsetMillis
*
* TODO docment it blocks
*  // TODO reimplement with coroutines to avoid the limitation due to MAX_THREAD_POOL_SIZE
* */
    private fun playSim(spans: List<SimSpan>): Result<List<SpanId>>{
        // To accumulate the dynamically scheduled futures for the spam execution
        val futures = ConcurrentLinkedQueue<ScheduledFuture<SpanId>>()
        // To wait for all spans to complete
        val allSpansComplete = CountDownLatch(spans.size)

        /** Schedules the replay of the spans of a trace
         *
         * @throws IllegalStateException when this tries to schedule the root trace too late
         * TODO return
          */
        fun replayTrace(spanTree: SimSpanTree) {
            val traceId = spans.first().spanId.traceId
            val replayStartTime = Duration.ofNanos(System.nanoTime())
            logger.info("Start scheduling of replay of trace with id $traceId at start time $replayStartTime")

            /** How much should the scheduler wait before creating a span, relative to `replayStartTimeNanos`
             * It throws an exception if the time is negative, because that implies we are too late to
             * schedule the span
             * TODO document notes
             * FIXME to extention?
             * */
            fun spanScheduleDelayNs(span: SimSpan): Duration {
                val delay = span.startTimeOffsetNs + replayStartTime.toNanos() - System.nanoTime()
                check(delay > 0){"Schedule delay for span with id ${span.spanId} is negative: too late to schedule"}
                return Duration.ofNanos(delay)
            }

            /**
             * TODO document notes
             * FIXME to extention?
             * */
            fun remainingSpanTime(span: SimSpan, spanStartTime: Duration): Duration {
                val duration = span.durationNs + spanStartTime.toNanos() - System.nanoTime()
                check(duration > 0){
                    "Remaining span duration for span with id ${span.spanId} is negative: not enough time to run the span"
                }
                return Duration.ofNanos(duration)
            }

            /**
             * Schedules the root span and adds the corresponding future to futures
             * @throws IllegalStateException when this tries to schedule the root trace too late
             * */
            fun scheduleSpanReplay(context: Context, spanTree: SimSpanTree, spanComplete: CountDownLatch?=null) {
                val span = spanTree.root
                val spanStart = scheduler.schedule(Callable{
                    try {
                        // TODO logging
                        val spanStartTime = Duration.ofNanos(System.nanoTime())
                        val emittedSpan = span.start(tracer, context)
                        val childrenContext = emittedSpan.storeInContext(context)
                        val childrenComplete = CountDownLatch(spanTree.children.size)

                        // launch wait for children, but let them add themselves to futures
                        spanTree.children.forEach{
                            scheduleSpanReplay(childrenContext, it, childrenComplete)
                        }
                        // wait for span duration
                        Thread.sleep(remainingSpanTime(span, spanStartTime))
                        // wait for children
                        childrenComplete.await()
                        // complete span emission
                        emittedSpan.end()

                        val emittedSpanCtx = emittedSpan.spanContext
                        SpanId(traceId = emittedSpanCtx.traceId, spanId = emittedSpanCtx.spanId)
                    } finally {
                        spanComplete?.countDown()
                        allSpansComplete.countDown()
                    }
                }, spanScheduleDelayNs(span).toNanos(), TimeUnit.NANOSECONDS)
                futures.add(spanStart)
            }

            // https://javadoc.io/doc/io.opentelemetry/opentelemetry-context/1.1.0/io/opentelemetry/context/Context.html
            val rootContext = Context.root() // TODO add to notes the println experiment
            scheduleSpanReplay(rootContext, spanTree)
            logger.info("Completed scheduling of replay of trace with id $traceId")
        }

        val traces = spans.groupBy { it.spanId.traceId}
        val traceSchedulingErrors = traces.values.map {
            // FIXME implement simSpanTree
            runCatching{replayTrace(simSpanTree(it))}
        }.filter { it.isFailure }
        if (traceSchedulingErrors.isNotEmpty()) {
            // Abort and do not wait for other spans
            return Result.success(emptyList()) // FIXME proper custom exception aggregating errors
        }

        // Wait for all spans to complete
        allSpansComplete.await()

        // TODO collect futures using runCatching to turn into result, aggregate all results into a single
        // custom exception, also with traceSchedulingErrors
        return Result.success(emptyList()) // FIXME
    }

    override fun close() {
        // Shutting down as recommended in https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html
        scheduler.shutdown()  // Disable new tasks from being submitted
        try {
            if (!scheduler.awaitTermination(
                    SCHEDULER_TERMINATION_TIMEOUT.toMillis(), TimeUnit.MILLISECONDS)) {
                scheduler.shutdownNow() // Cancel currently executing tasks
                // Wait a while for tasks to respond to being cancelled
                if (!scheduler.awaitTermination(
                        SCHEDULER_TERMINATION_TIMEOUT.toMillis(), TimeUnit.MILLISECONDS)) {
                    logger.error("Failure shutting down thread pool")
                }
            }
        } catch (ie: InterruptedException) {
            // (Re-)Cancel if current thread also interrupted
            scheduler.shutdownNow()
            // Preserve interrupt status
            Thread.currentThread().interrupt()
        }
    }
}

/** @return Filters and unwraps the successful results */
val <T> List<Result<T>>.successes: List<T>
    get() = this.flatMap {
        val value = it.getOrNull()
        when {
            value != null -> listOf(value)
            else -> emptyList()
        }
    }

/**
 * @return a suitable open telemetry API implementation, typically a configured
 * OTEL SDK instance
 * */
fun provideOtel(): OpenTelemetry {
    // https://opentelemetry.io/docs/languages/java/configuration/#zero-code-sdk-autoconfigure
    return AutoConfiguredOpenTelemetrySdk.initialize().openTelemetrySdk
}

fun provideTracer(otel: OpenTelemetry): Tracer {
    return otel.tracerProvider
        .tracerBuilder(SCOPE_NAME)
        .setInstrumentationVersion(SCOPE_VERSION)
        .setSchemaUrl(SCOPE_SCHEMA_URL)
        .build()
}

// FIXME delete
fun waitForSpanRecording(span: Span) {
    while (!span.isRecording) {
        println("waiting for span to get ready to record")
        Thread.sleep(1)
    }
    println("span ready to record!")
}

// FIXME delete
fun sendSomeArbitraryTraces() {
    val otel = provideOtel()
    val tracer = provideTracer(otel)

    println("Current context at start: [${Context.current()}]")
    println("Current context at start is null: [${Context.current() == null}]")
    println("Current context at start is Context.root(): [${Context.current().equals(Context.root())}]")
    Context.root()
    val context = Context.current()
        .with(ContextKey.named("fooCtxKey"), "barCtxKey")

    val span = tracer.spanBuilder("Hello-span")
        .setSpanKind(SpanKind.INTERNAL)
        .setAttribute(AttributeKey.stringKey("${SCOPE_NAME}.foo"),"bar")
        .setAttribute(AttributeKey.stringKey("${SCOPE_NAME}.qux"),"baz")
        .setParent(context)
        .startSpan()
    val ctxWithParentSpan = span.storeInContext(context)
    try {
        waitForSpanRecording(span)

        val childSpan = tracer.spanBuilder("child span")
            .setParent(ctxWithParentSpan)
            .startSpan()
        var childSpanScope: Scope? = null
        try {
            // only keeping this reference so we can close it later, and pop from the
            // stack in `Context.current()`
            childSpanScope = childSpan.makeCurrent()

            val grandSonSpan = tracer.spanBuilder("grandson")
                .setAttribute(AttributeKey.stringKey("${SCOPE_NAME}.grandSonFoo"), "bar")
                .startSpan()
            grandSonSpan.end()

        } finally {
            childSpanScope?.close()
            childSpan.end()
        }

        span.addEvent("foo event")
        span.setStatus(StatusCode.OK, "all good man")

    } finally {
        span.end()
        val spanCtx = span.spanContext
        println("Closed span with span id ${spanCtx.spanId}, trace id ${spanCtx.traceId}")
    }
}

fun main() {
    sendSomeArbitraryTraces() // FIXME remove as well as def
    // TODO use https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.io/use.html
    // for the replayer
    /*val otel = provideOtel()
    val tracer = provideTracer(otel)
    val replayer = SpanSimFilePlayer(tracer)*/

    // FIXME setup logger here and pass to replayer
    // FIXME setup loger to log time and other formatting
    val logger = LoggerFactory.getLogger("root")

    logger.info("Bye")
}
