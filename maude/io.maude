load file.maude

fmod MAYBE{X :: TRIV} is
 sort Maybe{X} .
 subsort X$Elt < Maybe{X} .
 op maybe : -> Maybe{X} [ctor] .
endfm

view Term from TRIV to META-TERM is
 sort Elt to Term .
endv

view Module from TRIV to META-MODULE is
 sort Elt to Module .
endv

fmod COMMANDS is

 sorts @Token@ @NeTokenList@ @Bubble@ @Command@ .

 op set`output`folder_. : @Token@ -> @Command@ [ctor] .
 op set`output`file_. : @Token@ -> @Command@ [ctor] .
 op set`solutions_. : @Token@ -> @Command@ [ctor] .
 op set`module_. : @Token@ -> @Command@ [ctor] .
 op start_. : @Bubble@ -> @Command@ [ctor] .
 op help : -> @Command@ [ctor] .
 op quit : -> @Command@ [ctor] .
 op q : -> @Command@ [ctor] .
endfm

fmod META-LUEGO-SIGN is
  inc META-LEVEL .

  var  SSDS : SubsortDeclSet .
  vars IL IL' : ImportList .
  var  EqS : EquationSet .
  var  ODS : OpDeclSet .
  var  MAS : MembAxSet .
  var  RS : RuleSet .
  var  SS : SortSet .
  var  H : Header .

  op BUBBLES : -> FModule .
  eq BUBBLES
    = (fmod 'GRAMMAR is
        including 'QID-LIST .
        sorts none .
        none
        op 'token : 'Qid -> '@Token@
             [special(
               (id-hook('Bubble, '1 '1)
                op-hook('qidSymbol, '<Qids>, nil, 'Qid)))] .
        op 'neTokenList : 'QidList -> '@NeTokenList@
             [special(
               (id-hook('Bubble, '1 '-1 '`( '`))
                op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList)
                op-hook('qidSymbol, '<Qids>, nil, 'Qid)
                id-hook('Exclude, '. ':)))] .
        op 'bubble : 'QidList -> '@Bubble@
             [special(
               (id-hook('Bubble, '1 '-1 '`( '`))
                op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList)
                op-hook('qidSymbol, '<Qids>, nil, 'Qid)
                id-hook('Exclude, 'eq 'ceq 'rl 'crl 'mb 'cmb 'sd 'csd
                                  'var 'vars 'strat 'endm
                                  'endfm 'endsm 'sorts 'subsort 'subsorts
                                  'subclass 'subclasses 'op 'ops
                                  'protecting 'pr 'including 'inc 'extending
                                  'ctor 'assoc 'comm '==)))] .
        none
        none
     endfm) .

  op GRAMMAR : -> FModule [memo] .
  eq GRAMMAR = addImports((including 'COMMANDS .), BUBBLES) .

  op addImports : ImportList Module -> Module .
  eq addImports(IL', fmod H is IL sorts SS . SSDS ODS MAS EqS endfm) =
                     fmod H is IL IL' sorts SS . SSDS ODS MAS EqS endfm .
  eq addImports(IL', mod H is IL sorts SS . SSDS ODS MAS EqS RS endm) =
                     mod H is IL IL' sorts SS . SSDS ODS MAS EqS RS endm .
endfm

fmod COMMAND-PROCESSING is
 pr META-LEVEL .
 pr CONVERSION .
 pr STRING-OPS .

 vars T T' T'' PAT : Term .
 vars TL TL' : TermList .
 var  SB : Substitution .
 var  Ct : Constant .
 var  QIL : QidList .
 vars Ty Ty' Ty'' : Type .
 var  V : Variable .
 var  M : Module .
 var  S : String .
 vars N N' : Nat .
 var  Q : Qid .

 op downQidList : Term ~> QidList .
 eq downQidList('nil.TypeList) = nil .
 eq downQidList(('__[TL], TL')) = (downQidList(TL) downQidList(TL')) .
 eq downQidList((Q, TL)) = (downQid(Q) downQidList(TL)) .
 eq downQidList(empty) = nil .

 op downQid : Term ~> Qid .
 eq downQid(Ct) = qid(substr(string(getName(Ct)), 1, length(string(getName(Ct))))) .

 op parseNum : Term ~> Nat .
 ceq parseNum(T) = N
  if Q := downQid(T) /\
     N := rat(string(Q), 10) .

 op downString : Term ~> String .
 ceq downString(T) = S
  if S := downTerm(T, "") .

 op parseString : Term ~> String .
 ceq parseString(T) = S
  if Q := downQid(T) /\
     S := string(Q) .

 op makeFolderString : String -> String .
 ceq makeFolderString(S) = S
  if endsWith(S, "/") .
 eq makeFolderString(S) = S + "/" [owise] .

 op parseBubbles : Module Term -> ResultPair .
 ceq parseBubbles(M, T) = {T', Ty}
  if QIL := downQidList(T) /\
     {T', Ty} := metaParse(M, QIL, anyType) .

 op searchTerms : Module Term Nat Qid -> TermList .
 ceq searchTerms(M, T, N, Q) = TL
  if TL := obtainResults(M, T, 0, N, Q) .

 op obtainResults : Module Term Nat Nat Qid -> TermList .
 ceq obtainResults(M, T, N, N', Q) = T'', TL
  if N < N' /\
     {T', Ty'} := metaSrewrite(M, T, all !, depthFirst, N) /\ *** metaRewrite(M, T, unbounded) /\
     {T'', Ty''} := metaReduce(M, Q[T']) /\
     TL := obtainResults(M, T, s(N), N', Q) .
 eq obtainResults(M, T, N, N', Q) = empty [owise] .

endfm

mod LUEGO-IO is
 pr COMMAND-PROCESSING .
 pr META-LUEGO-SIGN .
 pr MAYBE{Module} .
 pr MAYBE{Term} .
 inc STD-STREAM .
 pr LEXICAL .
 inc FILE .

 vars S OUTFILE OUTFILE' OUTFOLDER OUTFOLDER' : String .
 var  AtS : AttributeSet .
 var  MM : Maybe{Module} .
 vars TL TR : TermList .
 vars N N' COUNT : Nat .
 vars O FHOut : Oid .
 vars T T' : Term .
 var  M : Module .
 var  Ty : Type .
 var  C : Char .
 var  Q : Qid .

 ***            ***
 *** Attributes ***
 ***            ***

 *** Output folder path
 op output-folder:_ : String -> Attribute [ctor] .
 *** Output file path
 op output-file:_ : String -> Attribute [ctor] .
 *** Parsed input
 op input:_ : Maybe{Term} -> Attribute [ctor] .
 *** Current state
 op state:_ : State -> Attribute [ctor] .
 *** Number of solutions
 op num-solutions:_ : Nat -> Attribute [ctor] .
 *** Current module
 op module:_ : Maybe{Module} -> Attribute [ctor] .
 *** Print function
 op printFunction:_ : Qid -> Attribute [ctor] .
 *** Meta-represented traces
 op traces:_ : TermList -> Attribute [ctor gather (&)] .
 *** Counter for file names
 op counter:_ : Nat -> Attribute [ctor gather (&)] .

 ***            ***
 ***   States   ***
 ***            ***

 sort State .
 ops waiting processing write&wait write&end finished startSaving saving wait4save : -> State [ctor] .

 *** Messages ***

 op errorMsg : -> String .
 eq errorMsg = "\n" + printTokens('\! '\r) + "Error: " + printTokens('\o) .

 op noParseMsg : -> String .
 eq noParseMsg = errorMsg + "Command not parsed.\n\n" .

 op byeMsg : -> String .
 eq byeMsg = "\nBye!\n\n" .

 op setSolutionsMsg : Nat -> String .
 eq setSolutionsMsg(N) = "\nNumber of solutions set to " + printRed(string(N, 10)) + ".\n\n" .

 op noNatMsg : -> String .
 eq noNatMsg = errorMsg + "Natural number expected.\n\n" .

 op noStringMsg : -> String .
 eq noStringMsg = errorMsg + "String expected.\n\n" .

 op setFileMsg : String -> String .
 eq setFileMsg(OUTFILE) = "\nOutput file selected: " + printRed(OUTFILE) + ".\n\n" .

 op setFolderMsg : String -> String .
 eq setFolderMsg(OUTFILE) = "\nOutput folder selected: " + printRed(OUTFILE) + ".\n\n" .

 op printRed : String -> String .
 eq printRed(S) = printTokens('\! '\r) + S + printTokens('\o) .

 op errorModule : -> String .
 eq errorModule = errorMsg + "Module does not exist.\n\n" .

 op moduleMsg : Qid -> String .
 eq moduleMsg(Q) = "\nModule " + printRed(string(Q)) + " selected.\n\n" .

 op noModuleMsg : -> String .
 eq noModuleMsg = errorMsg + "The module must be set before starting.\n\n" .

 op helpMsg : -> String .
 eq helpMsg = printRed("\nset output folder") + " FOLDER " + printRed(".") + "\t-> Updates the output folder name to FOLDER." +
              printRed("\nset output file") + " FILE " + printRed(".")     + "\t\t-> Updates the output file name to FILE." +
              printRed("\nset solutions") + " NUM " + printRed(".")        + "\t\t-> Updates the number of solutions to NUM." +
              printRed("\nset module") + " MOD-NAME " + printRed(".")      + "\t\t-> Updates the module where solutions are searched to MOD-NAME." +
              printRed("\nstart") + " TERM " + printRed(".")               + "\t\t\t-> Starts the searches from TERM." +
              printRed("\nquit")                                           + "\t\t\t\t-> Exits the system." +
              printRed("\nq")                                              + "\t\t\t\t-> Exits the system." +
              printRed("\nhelp")                                           + "\t\t\t\t-> Displays this help.\n\n" .

 op saveFinishedMsg : -> String .
 eq saveFinishedMsg = "\nFile(s) saved successfully.\n" .

 ***           ***
 *** CID & OID ***
 ***           ***

 *** Object and class definition
 op luego : -> Oid [ctor] .
 op Luego : -> Cid [ctor] .

 **************************
 ***                    ***
 ***      Set module    ***
 ***                    ***
 **************************

 crl [set-module] :
     < luego : Luego | input: ('set`module_.['token[T]]), state: processing,
                       module: MM, AtS >
  => < luego : Luego | input: maybe, state: write&wait, module: M, AtS >
     write(stdout, luego, moduleMsg(Q))
  if Q := downQid(T) /\
     M := upModule(Q, true) .

 crl [set-module] :
     < luego : Luego | input: ('set`module_.['token[T]]), state: processing,
                       module: MM, AtS >
  => < luego : Luego | input: maybe, state: write&wait, module: MM, AtS >
     write(stdout, luego, errorModule)
  if Q := downQid(T) /\
     not (upModule(Q, true) :: Module) .

 *********************************
 ***                           ***
 ***      Set output folder    ***
 ***                           ***
 *********************************

 crl [set-output-folder] :
     < luego : Luego | input: ('set`output`folder_.['token[T]]), state: processing,
                       output-folder: OUTFOLDER, AtS >
  => < luego : Luego | input: maybe, state: write&wait, output-folder: OUTFOLDER', AtS >
     write(stdout, luego, setFolderMsg(OUTFOLDER'))
  if OUTFOLDER' := makeFolderString(parseString(T)) .

 crl [set-output-folder-error] :
     < luego : Luego | input: ('set`output`folder_.['token[T]]), state: processing, AtS >
  => < luego : Luego | input: maybe, state: write&wait, AtS >
     write(stdout, luego, noStringMsg)
  if not (parseString(T) :: String) .

 *******************************
 ***                         ***
 ***      Set output file    ***
 ***                         ***
 *******************************

 crl [set-output-file] :
     < luego : Luego | input: ('set`output`file_.['token[T]]), state: processing,
                       output-file: OUTFILE, AtS >
  => < luego : Luego | input: maybe, state: write&wait, output-file: OUTFILE', AtS >
     write(stdout, luego, setFileMsg(OUTFILE'))
  if OUTFILE' := parseString(T) .

 crl [set-output-file-error] :
     < luego : Luego | input: ('set`output`file_.['token[T]]), state: processing, AtS >
  => < luego : Luego | input: maybe, state: write&wait, AtS >
     write(stdout, luego, noStringMsg)
  if not (parseString(T) :: String) .

 *****************************
 ***                       ***
 ***      Set solutions    ***
 ***                       ***
 *****************************

 crl [set-solutions] :
     < luego : Luego | input: ('set`solutions_.['token[T]]), state: processing,
                       num-solutions: N, AtS >
  => < luego : Luego | input: maybe, state: write&wait, num-solutions: N', AtS >
     write(stdout, luego, setSolutionsMsg(N'))
  if N' := parseNum(T) .

 crl [set-solutions-error] :
     < luego : Luego | input: ('set`solutions_.['token[T]]), state: processing, AtS >
  => < luego : Luego | input: maybe, state: write&wait, AtS >
     write(stdout, luego, noNatMsg)
  if not (parseNum(T) :: Nat) .

 *********************
 ***               ***
 ***      Save     ***
 ***               ***
 *********************

 crl [save] :
     < luego : Luego | state: startSaving, traces: TR, output-folder: OUTFOLDER,
                       output-file: OUTFILE, counter: COUNT, AtS >
  => < luego : Luego | state: saving, traces: TR, output-folder: OUTFOLDER,
                       output-file: OUTFILE, counter: s(COUNT), AtS >
     openFile(fileManager, luego, S, "w")
  if TR =/= empty /\
     S := OUTFOLDER + OUTFILE + string(COUNT, 10) + ".jsonl" .

 rl [save-end] :
    < luego : Luego | state: startSaving, traces: empty, AtS >
 => < luego : Luego | state: write&wait, traces: empty, AtS >
    write(stdout, luego, saveFinishedMsg).

 crl [save-first-trace] :
     openedFile(luego, fileManager, FHOut)
     < luego : Luego | state: saving, traces: (T, TR), AtS >
  => < luego : Luego | state: saving, traces: TR, AtS >
     write(FHOut, luego, S)
  if S := downString(T) .

 rl [first-trace-saved] :
    wrote(luego, FHOut)
    < luego : Luego | state: saving, AtS >
 => < luego : Luego | state: saving, AtS >
    closeFile(FHOut, luego) .

 rl [file-closed-save] :
    closedFile(luego, FHOut)
    < luego : Luego | state: saving, AtS >
 => < luego : Luego | state: startSaving, AtS > .

 **********************
 ***                ***
 ***      Start     ***
 ***                ***
 **********************

 crl [start] :
     < luego : Luego | input: ('start_.['bubble[T]]), state: processing,
                       module: M, num-solutions: N, printFunction: Q,
                       output-file: OUTFILE, traces: TR, counter: COUNT, AtS >
  => < luego : Luego | input: maybe, state: startSaving, module: M,
                       num-solutions: N, printFunction: Q, output-file: OUTFILE,
                       traces: TL, counter: 1, AtS >
  if OUTFILE =/= "" /\
     {T', Ty} := parseBubbles(M, T) /\
     TL := searchTerms(M, T', N, Q) .

 rl [start-no-module] :
    < luego : Luego | input: ('start_.['bubble[T]]), state: processing,
                      module: maybe, AtS >
 => < luego : Luego | input: maybe, state: write&wait, module: maybe, AtS >
    write(stdout, luego, noModuleMsg) .

 *********************
 ***               ***
 ***      Help     ***
 ***               ***
 *********************

 rl [help] :
    < luego : Luego | input: 'help.@Command@, state: processing, AtS >
 => < luego : Luego | input: maybe, state: write&wait, AtS >
    write(stdout, luego, helpMsg) .

 ********************
 ***              ***
 ***      Quit    ***
 ***              ***
 ********************

 rl [parse-command] :
    < luego : Luego | input: 'quit.@Command@, state: processing, AtS >
 => < luego : Luego | input: maybe, state: write&end, AtS >
    write(stdout, luego, byeMsg) .

 rl [parse-command] :
    < luego : Luego | input: 'q.@Command@, state: processing, AtS >
 => < luego : Luego | input: maybe, state: write&end, AtS >
    write(stdout, luego, byeMsg) .

 ********************
 ***              ***
 ***     Parse    ***
 ***              ***
 ********************

 crl [parse-command] :
     gotLine(luego, stdin, S)
     < luego : Luego | input: maybe, state: waiting, AtS >
  => < luego : Luego | input: T, state: processing, AtS >
  if {T, Ty} := metaParse(GRAMMAR, tokenize(S), '@Command@) .

 crl [parse-command-error] :
     gotLine(luego, stdin, S)
     < luego : Luego | state: waiting, AtS >
  => < luego : Luego | state: write&wait, AtS >
     write(stdout, luego, noParseMsg)
  if not (metaParse(GRAMMAR, tokenize(S), '@Command@) :: ResultPair) .

 ********************
 ***              ***
 ***     Wrote    ***
 ***              ***
 ********************

 rl [remove-wrote] :
    wrote(luego, stdout)
    < luego : Luego | state: write&wait, AtS >
 => < luego : Luego | state: waiting, AtS >
    getLine(stdin, luego, "Luego> ") .

 rl [remove-wrote] :
    wrote(luego, stdout)
    < luego : Luego | state: write&end, AtS >
 => < luego : Luego | state: finished, AtS > .

 ************************************
 ***                              ***
 *** Initial value for attributes ***
 ***                              ***
 ************************************
 op initAtS : -> AttributeSet .
 eq initAtS = output-file: "trace", output-folder: "jsons/", input: maybe,
              state: waiting, num-solutions: 1, module: maybe,
              printFunction: 'printTrace, traces: empty, counter: 1 .

 op run : -> Configuration .
 eq run
  = <> < luego : Luego | initAtS >
    getLine(stdin, luego, "Luego> ") .
endm

set print attribute on .
set print conceal on .
print conceal module:_ .

erew run .
