load date.maude

fmod PROTO-VALUE is
    sorts Value Value? .
    subsort Value < Value? .
endfm

view Value from TRIV to PROTO-VALUE is
    sort Elt to Value .
endv


fmod VALUE is
    pr MAP{String, Value} .
    pr LIST{Value} .
    pr STRING .
    pr FLOAT .
    pr DATE .
    pr INT .

    ex PROTO-VALUE .

    op null : -> Value [ctor] .

    var b b' : Bool .
    var i i' : Int .
    var s s' : String .
    var d d' : Date .
    var f f' : Float .
    var v v' : Value .
    var  MSV : Map{String, Value} .

    op v : Date -> Value [ctor] .
    op v : String -> Value [ctor] .
    op v : Bool -> Value [ctor] .
    op v : Int -> Value [ctor] .
    op v : Float -> Value [ctor] .
    op v : List{Value} -> Value [ctor] .
    op v : Map{String, Value} -> Value? [ctor] .


    op valid : Map{String, Value} -> Bool .
    ceq valid((s |-> v, s' |-> v', MSV)) = true
    if s =/= s' .
    eq valid(MSV) = false [owise] .

    cmb v(MSV) : Value
        if valid(MSV) .

    op _<_ : Value Value ~> Bool .
    eq  v(i) < v(i') = i < i' .
    eq  v(s) < v(s') = s < s' .
    eq  v(d) < v(d') = d < d' .
    eq  v(f) < v(f') = f < f' .


    op _>_ : Value Value ~> Bool .

    eq  v(i) > v(i') = i > i' .
    eq  v(s) > v(s') = s > s' .
    eq  v(d) > v(d') = d > d' .
    eq  v(f) > v(f') = f > f' .



    op _=_ : Value Value -> Bool .
    eq  v = v = true .
    eq  v = v' = false [owise] .


    op _!=_ : Value Value -> Bool .
    eq v != v' = not (v = v').

    op getInt : Value ~> Int .
    eq getInt(v(i)) = i .
    op getString : Value ~> String .
    eq getString(v(s)) = s .
    op getFloat : Value ~> Float .
    eq getFloat(v(f)) = f .
    op getDate : Value ~> Date .
    eq getDate(v(d)) = d .
    op getBool : Value ~> Bool .
    eq getBool(v(b)) = b .

endfm
