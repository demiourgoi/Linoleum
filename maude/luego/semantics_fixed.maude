omod LUEGO-SEMANTICS is
 pr ID-HANDLING .

 vars MSV MSV' : Map{String, Value} .
 vars CTDB LCTDB : ClientTaskDB .
 vars N TIME ELAPSED MAX : Nat .
 var  TPL : TaskPairList .
 var  DBC : DBContents .
 var  CID : ClientId .
 var  TL : TaskList .
 var  WI : WorkerId .
 var  TID : TaskId .
 var  R : Result .
 var  T : Task .
 var  JL : JL .

 rl [request-reaches-balancer] :
    < CID : Client | tasks : T TL, ctaskDB : CTDB >
    *** < lb : LoadBalancer | >
    < lapi : LuegoAPI | >
    < log : Log | jl : JL >
    < clock : Clock | global : TIME, elapsedSinceLast : ELAPSED >
 => < CID : Client | tasks : TL >
    *** < lb : LoadBalancer | >
    < lapi : LuegoAPI | >
    request-tid(CID, T)
    < log : Log | jl : JL $ createInitialTrace(T, TIME, ELAPSED) $
                       createTraceChild(T, 1, 11, "request-reaches-balancer", TIME, ELAPSED) >
    < clock : Clock | global : TIME + ELAPSED > .

 rl [request-reaches-db] :
    request-tid(CID, T)
    < db : DB | contents : DBC, counter : N >
    < log : Log | jl : JL, clientTDB : LCTDB >
    < clock : Clock | global : TIME, elapsedSinceLast : ELAPSED >
 => < db : DB | contents : addKey(DBC, taskId(N)), counter : s(N) >
    taskIdAssigned-lapi(CID, T, taskId(N))
    < log : Log | jl : JL $ createTraceChild(T, 1, 12, "request-reaches-db", TIME, ELAPSED),
                 clientTDB : (LCTDB, [T, taskId(N)]) >
    < clock : Clock | global : TIME + ELAPSED >  .

 rl [taskId-reaches-balancer] :
    taskIdAssigned-lapi(CID, T, TID)
    *** < lb : LoadBalancer | >
    < lapi : LuegoAPI | >
    < log : Log | jl : JL >
    < clock : Clock | global : TIME, elapsedSinceLast : ELAPSED >
 => *** < lb : LoadBalancer | >
    < lapi : LuegoAPI | >
    taskIdAssigned(CID, T, TID)
    request-worker(T, TID)
    < log : Log | jl : JL $ createTraceChild(T, 1, 13, "taskId-reaches-balancer", TIME, ELAPSED) >
    < clock : Clock | global : TIME + ELAPSED > .

 rl [client-taskId-assigned] :
    taskIdAssigned(CID, T, TID)
    < CID : Client | ctaskDB : CTDB >
    < log : Log | jl : JL >
    < clock : Clock | global : TIME, elapsedSinceLast : ELAPSED >
 => < CID : Client | ctaskDB : (CTDB, [T, TID]) >
    < log : Log | jl : JL $ createTraceChild(T, 1, 14, "client-taskId-assigned", TIME, ELAPSED) >
    < clock : Clock | global : TIME + ELAPSED > .

 rl [add-queue] :
    request-worker(T, TID)
    < queue : Queue | tasksPL : TPL >
    < log : Log | jl : JL >
    < clock : Clock | global : TIME, elapsedSinceLast : ELAPSED >
 => < queue : Queue | tasksPL : [T, TID] ; TPL >
    < log : Log | jl : updateTime1(JL $ createTraceChild(T, 1, 15, "add-queue", TIME, ELAPSED), T, TIME + ELAPSED) >
    < clock : Clock | global : TIME + ELAPSED > .

 rl [worker-gets-task] :
    < queue : Queue | tasksPL : TPL ; [T, TID] >
    < WI : Worker | tasks : mtTPL >
    < log : Log | jl : JL >
    < clock : Clock | global : TIME, elapsedSinceLast : ELAPSED >
 => < queue : Queue | tasksPL : TPL >
    < WI : Worker | tasks : [T, TID] >
    < log : Log | jl : JL $ createTraceChild(T, 2, TIME, 0, "second-half")
                          $ createTraceChild(T, 2, 21, "worker-gets-task", TIME, ELAPSED) >
    < clock : Clock | global : TIME + ELAPSED > .

 rl [work-done] :
    < WI : Worker | tasks : [task(N), TID] >
    < rapi : RESTAPI | >
    < log : Log | jl : JL, clientTDB : (CTDB, [T, TID]) >
    < clock : Clock | global : TIME, elapsedSinceLast : ELAPSED >
 => < WI : Worker | tasks : mtTPL >
    < rapi : RESTAPI | >
    work-done(TID, result(N))
    < log : Log | jl : JL $ createTraceChild(T, 2, 22, "work-done", TIME, ELAPSED) >
    < clock : Clock | global : TIME + ELAPSED > .

 rl [work-done-lapi] :
    work-done(TID, result(N))
    < lapi : LuegoAPI | >
    < log : Log | jl : JL, clientTDB : (CTDB, [T, TID]) >
    < clock : Clock | global : TIME, elapsedSinceLast : ELAPSED >
 => < lapi : LuegoAPI | >
    work-done-db(TID, result(N))
    < log : Log | jl : JL $ createTraceChild(T, 2, 23, "work-done-lapi", TIME, ELAPSED) >
    < clock : Clock | global : TIME + ELAPSED > .

 rl [work-done-db] :
    work-done-db(TID, R)
    < db : DB | contents : DBC >
    < log : Log | jl : JL, clientTDB : (CTDB, [T, TID]) >
    < clock : Clock | global : TIME, elapsedSinceLast : ELAPSED >
 => < db : DB | contents : add(DBC, TID, R) >
    < log : Log | jl : updateTime2(JL $ createTraceChild(T, 2, 24, "work-done-db", TIME, ELAPSED), T, TIME + ELAPSED) >
    < clock : Clock | global : TIME + ELAPSED > .
endom

omod TEST is
 pr LUEGO-SEMANTICS .

 op init : -> Configuration .
 eq init = *** Client 0,with three tasks
           *** < c(0) : Client | tasks : task(1) task(2) task(3), ctaskDB : mtCTDB >
           *** Client 1, with two tasks
           *** < c(1) : Client | tasks : task(4) task(5), ctaskDB : mtCTDB >
           *** Client 0,with one task
           < c(0) : Client | tasks : task(1), ctaskDB : mtCTDB >
           *** Client 1, with two tasks
           *** < c(1) : Client | tasks : task(4), ctaskDB : mtCTDB >
           *** Load balancer
           *** < lb : LoadBalancer | none >
           *** Luego API
           < lapi : LuegoAPI | >
           *** Database with initial counter
           < db : DB | contents : mtDB, counter : 0 >
           *** Queue
           < queue : Queue | tasksPL : mtTPL >
           *** REST API
           < rapi : RESTAPI | >
           *** Worker 0
           < w(0) : Worker | tasks : mtTPL >
           *** Worker 1
           < w(1) : Worker | tasks : mtTPL >
           *** Log
           < log : Log | jl : mtJL, clientTDB : mtCTDB >
           *** Clock
           < clock : Clock | global : 0, elapsedSinceLast : 500 >
           .
endom



set print attribute on .

rew init .

search [1] init =>! C:Configuration .