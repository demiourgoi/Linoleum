mod LUEGO-SEMANTICS is
 pr ID-HANDLING .
 pr RANDOM .

 vars N TIME ELAPSED MAX counter : Nat .
 vars MSV MSV' : Map{String, Value} .
 vars CTDB LCTDB : ClientTaskDB .
 var  TPL : TaskPairList .
 var  DBC : DBContents .
 var  TL : TaskList .
 var  TID : TaskId .
 var  R : Result .
 var  CID : CId .
 var  T : Task .
 var  JL : JL .

 rl [request-reaches-balancer] :
    [CID | T TL, CTDB]
    *** loadBalancer
    lapi
    log(JL, LCTDB)
    clock(TIME, ELAPSED, MAX, counter)
 => [CID | TL, CTDB]
    *** loadBalancer
    lapi
    request-tid(CID, T)
    log(JL $ createInitialTrace(T, TIME, ELAPSED) $
             createTraceChild(T, 1, 11, "request-reaches-balancer", TIME, ELAPSED), LCTDB)
    clock(TIME + ELAPSED, (random(counter) rem MAX) + 200, MAX, s(counter)) .

 rl [request-reaches-db] :
    request-tid(CID, T)
    db(DBC, N)
    log(JL, LCTDB)
    clock(TIME, ELAPSED, MAX, counter)
 => db(addKey(DBC, taskId(N)), s(N))
    taskIdAssigned-lapi(CID, T, taskId(N))
    log(JL $ createTraceChild(T, 1, 12, "request-reaches-db", TIME, ELAPSED), (LCTDB, [T, taskId(N)]))
    clock(TIME + ELAPSED, (random(counter) rem MAX) + 200, MAX, s(counter))  .

 rl [taskId-reaches-balancer] :
    taskIdAssigned-lapi(CID, T, TID)
    *** loadBalancer
    lapi
    log(JL, LCTDB)
    clock(TIME, ELAPSED, MAX, counter)
 => *** loadBalancer
    lapi
    taskIdAssigned(CID, T, TID)
    request-worker(T, TID)
    log(JL $ createTraceChild(T, 1, 13, "taskId-reaches-balancer", TIME, ELAPSED), LCTDB)
    clock(TIME + ELAPSED, (random(counter) rem MAX) + 200, MAX, s(counter)) .

 rl [client-taskId-assigned] :
    taskIdAssigned(CID, T, TID)
    [CID | TL, CTDB]
    log(JL, LCTDB)
    clock(TIME, ELAPSED, MAX, counter)
 => [CID | TL, (CTDB, [T, TID])]
    log(JL $ createTraceChild(T, 1, 14, "client-taskId-assigned", TIME, ELAPSED), LCTDB)
    clock(TIME + ELAPSED, (random(counter) rem MAX) + 200, MAX, s(counter)) .

 rl [add-queue] :
    request-worker(T, TID)
    queue(TPL)
    log(JL, LCTDB)
    clock(TIME, ELAPSED, MAX, counter)
 => queue([T, TID] ; TPL)
    log(updateTime1(JL $ createTraceChild(T, 1, 15, "add-queue", TIME, ELAPSED), T, TIME + ELAPSED), LCTDB)
    clock(TIME + ELAPSED, (random(counter) rem MAX) + 200, MAX, s(counter)) .

 rl [worker-gets-task] :
    queue(TPL ; [T, TID])
    worker(mtTPL)
    log(JL, LCTDB)
    clock(TIME, ELAPSED, MAX, counter)
 => queue(TPL)
    worker([T, TID])
    log(JL $ createTraceChild(T, 2, TIME, 0, "second-half")
           $ createTraceChild(T, 2, 21, "worker-gets-task", TIME, ELAPSED), LCTDB)
    clock(TIME + ELAPSED, (random(counter) rem MAX) + 200, MAX, s(counter)) .

 rl [work-done] :
    worker([task(N), TID])
    rapi
    log(JL, (CTDB, [T, TID]))
    clock(TIME, ELAPSED, MAX, counter)
 => worker(mtTPL)
    rapi
    work-done(TID, result(N))
    log(JL $ createTraceChild(T, 2, 22, "work-done", TIME, ELAPSED), (CTDB, [T, TID]))
    clock(TIME + ELAPSED, (random(counter) rem MAX) + 200, MAX, s(counter)) .

 rl [work-done-lapi] :
    work-done(TID, result(N))
    lapi
    log(JL, (CTDB, [T, TID]))
    clock(TIME, ELAPSED, MAX, counter)
 => lapi
    work-done-db(TID, result(N))
    log(JL $ createTraceChild(T, 2, 23, "work-done-lapi", TIME, ELAPSED), (CTDB, [T, TID]))
    clock(TIME + ELAPSED, (random(counter) rem MAX) + 200, MAX, s(counter)) .

 rl [work-done-db] :
    work-done-db(TID, R)
    db(DBC, N)
    log(JL, (CTDB, [T, TID]))
    clock(TIME, ELAPSED, MAX, counter)
 => db(add(DBC, TID, R), N)
    log(updateTime2(JL $ createTraceChild(T, 2, 24, "work-done-db", TIME, ELAPSED), T, TIME + ELAPSED), (CTDB, [T, TID]))
    clock(TIME + ELAPSED, (random(counter) rem MAX) + 200, MAX, s(counter)) .
endm

mod TEST is
 pr LUEGO-SEMANTICS .

 op max : -> Nat .
 eq max = 400 .

 op init : -> Sys .
 eq init = *** [c(0) | task(1) task(2) task(3), mtCTDB] *** Client 0, with three tasks
           *** [c(1) | task(4) task(5), mtCTDB]         *** Client 1, with two tasks
           [c(0) | task(1), mtCTDB]             *** Client 0, with three tasks
           *** [c(1) | task(4), mtCTDB]             *** Client 1, with two tasks
           *** loadBalancer                         *** Load balancer
           lapi                                     *** Luego API, initial counter for generating task IDs
           db(mtDB, 0)                              *** Database
           queue(mtTPL)                             *** Queue
           rapi                                     *** REST API
           worker(mtTPL)                            *** Worker 0
           worker(mtTPL)                            *** Worker 1
           log(mtJL, mtCTDB)                        *** Log
           clock(0, (random(0) rem max) + 200, max, 1)      *** Clock
           .
endm

eof

rew init .