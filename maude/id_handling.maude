fmod ID-HANDLING is
 pr LUEGO-SYNTAX .

 vars TRACE-ID SPAN-ID SPAN-NAME PARENT-ID CHILD-ID CHILD-ID' : String .
 vars START-TIME DURATION TIME N N' : Nat .
 var  MSV : Map{String, Value} .
 vars JL JL' : JL .
 var  T : Task .

 op mkTraceId : Task -> String [memo] .
 eq mkTraceId(task(N)) = "trace" + string(N, 10) .

 op mkRootId : Task -> String [memo] .
 eq mkRootId(task(N)) = "root" + string(N, 10) .

 op mkChildId : Task Nat -> String [memo] .
 eq mkChildId(task(N), N') = "child" + string(N, 10) + string(N', 10) .

 op createInitialTrace : Task Nat Nat -> JL .
 ceq createInitialTrace(T, START-TIME, DURATION) =
                                     createTrace(T, START-TIME) $
                                     createTraceChild(TRACE-ID, CHILD-ID, mkRootId(T), START-TIME)
  if TRACE-ID := mkTraceId(T) /\
     CHILD-ID := mkChildId(T, 1) /\
     CHILD-ID' := mkChildId(T, 11) .

 op createTrace : Task String Nat Nat Map{String, Value} -> JSON .
 ceq createTrace(T, SPAN-ID, START-TIME, DURATION, MSV) =
        createTrace(TRACE-ID, SPAN-ID, START-TIME, DURATION, MSV)
  if TRACE-ID := mkTraceId(T) .

 op createTrace : String String Nat Nat Map{String, Value} -> JSON .
 eq createTrace(TRACE-ID, SPAN-ID, START-TIME, DURATION, MSV) =
    v(("spanId"            |-> v(("traceId" |-> v(TRACE-ID),
                                  "spanId"  |-> v(SPAN-ID))),
       "spanName"          |-> v(SPAN-ID),
       "startTimeOffsetMs" |-> v(START-TIME),
       "durationMs"        |-> v(DURATION),
       "attributes"        |-> v(MSV))) .

 op createTrace : Task String Nat -> JSON .
 ceq createTrace(T, SPAN-ID, START-TIME) =
      createTrace(TRACE-ID, SPAN-ID, START-TIME)
  if TRACE-ID := mkTraceId(T) .


 op createTrace : String String Nat -> JSON .
 eq createTrace(TRACE-ID, SPAN-ID, START-TIME) =
    v(("spanId"            |-> v(("traceId" |-> v(TRACE-ID),
                                  "spanId"  |-> v(SPAN-ID))),
       "spanName"          |-> v(SPAN-ID),
       "startTimeOffsetMs" |-> v(START-TIME),
       "durationMs"        |-> v(0),
       "attributes"        |-> v("foo" |-> v("bar")))) .

 op createTrace : Task String Nat -> JSON .
 ceq createTrace(T, SPAN-ID, START-TIME) =
      createTrace(TRACE-ID, SPAN-ID, START-TIME)
  if TRACE-ID := mkTraceId(T) .

 op createTrace : Task Nat -> JSON .
 ceq createTrace(T, START-TIME) =
      createTrace(TRACE-ID, SPAN-ID, START-TIME)
  if TRACE-ID := mkTraceId(T) /\
     SPAN-ID := mkRootId(T) .

 op createTraceChild : Task Nat Nat Nat -> JSON .
 ceq createTraceChild(T, N, START-TIME, DURATION) =
      createTraceChild(TRACE-ID, SPAN-ID, PARENT-ID, START-TIME, DURATION)
  if TRACE-ID := mkTraceId(T) /\
     PARENT-ID := mkRootId(T) /\
     SPAN-ID := mkChildId(T, N) .

 op createTraceChild : Task Nat Nat Nat Nat -> JSON .
 ceq createTraceChild(T, N, N', START-TIME, DURATION) =
      createTraceChild(TRACE-ID, SPAN-ID, PARENT-ID, START-TIME, DURATION)
  if TRACE-ID := mkTraceId(T) /\
     PARENT-ID := mkChildId(T, N) /\
     SPAN-ID := mkChildId(T, N') .

 op createTraceChild : Task Nat String Nat Nat -> JSON .
 ceq createTraceChild(T, N, SPAN-ID, START-TIME, DURATION) =
      createTraceChild(TRACE-ID, SPAN-ID, PARENT-ID, START-TIME, DURATION)
  if TRACE-ID := mkTraceId(T) /\
     PARENT-ID := mkChildId(T, N) .

 op createTrace : String String Nat -> JSON .
 eq createTrace(TRACE-ID, SPAN-ID, START-TIME) =
    v(("spanId"            |-> v(("traceId" |-> v(TRACE-ID),
                                  "spanId"  |-> v(SPAN-ID))),
       "spanName"          |-> v(SPAN-ID),
       "startTimeOffsetMs" |-> v(START-TIME),
       "durationMs"        |-> v(0),
       "attributes"        |-> v("foo" |-> v("bar")))) .

 op createTraceChild : String String String Nat Nat -> JSON .
 eq createTraceChild(TRACE-ID, SPAN-ID, PARENT-ID, START-TIME, DURATION) =
    v(("spanId"            |-> v(("traceId" |-> v(TRACE-ID),
                                  "spanId"  |-> v(SPAN-ID))),
       "spanName"          |-> v(SPAN-ID),
       "parentId"          |-> v(PARENT-ID),
       "startTimeOffsetMs" |-> v(START-TIME),
       "durationMs"        |-> v(DURATION),
       "attributes"        |-> v("foo" |-> v("bar")))) .

 op createTraceChild : String String String Nat -> JSON .
 eq createTraceChild(TRACE-ID, SPAN-ID, PARENT-ID, START-TIME) =
    v(("spanId"            |-> v(("traceId" |-> v(TRACE-ID),
                                  "spanId"  |-> v(SPAN-ID))),
       "spanName"          |-> v(SPAN-ID),
       "parentId"          |-> v(PARENT-ID),
       "startTimeOffsetMs" |-> v(START-TIME),
       "durationMs"        |-> v(0),
       "attributes"        |-> v("foo" |-> v("bar")))) .

 op updateTime1 : JL Task Nat -> JL .
 eq updateTime1(JL, T, TIME) = updateTime1(JL, mkChildId(T, 1), TIME) .

 op updateTime1 : JL String Nat -> JL .
 eq updateTime1(JL $ v(("durationMs"        |-> v(0),
                        "spanName"          |-> v(SPAN-ID),
                        "startTimeOffsetMs" |-> v(START-TIME),
                        MSV)) $ JL', SPAN-ID, TIME) =
                JL $ v(("durationMs"        |-> v(sd(TIME, START-TIME)),
                        "spanName"          |-> v(SPAN-ID),
                        "startTimeOffsetMs" |-> v(START-TIME),
                        MSV)) $ JL' .
 eq updateTime1(JL, SPAN-ID, TIME) = JL [owise] .

 op updateTime2 : JL Task Nat -> JL .
 eq updateTime2(JL, T, TIME) = updateRoot(updateTime2(JL, mkChildId(T, 2), TIME), mkRootId(T), TIME) .

 op updateTime2 : JL String Nat -> JL .
 eq updateTime2(JL $ v(("durationMs"        |-> v(0),
                        "spanName"          |-> v(SPAN-ID),
                        "startTimeOffsetMs" |-> v(START-TIME),
                        MSV)) $ JL', SPAN-ID, TIME) =
                JL $ v(("durationMs"        |-> v(sd(TIME, START-TIME)),
                        "spanName"          |-> v(SPAN-ID),
                        "startTimeOffsetMs" |-> v(START-TIME),
                        MSV)) $ JL' .
 eq updateTime2(JL, SPAN-ID, TIME) = JL [owise] .

 op updateRoot : JL String Nat -> JL .
 eq updateRoot(JL $ v(("durationMs"        |-> v(0),
                       "spanName"          |-> v(SPAN-ID),
                       "startTimeOffsetMs" |-> v(START-TIME),
                       MSV)) $ JL', SPAN-ID, TIME) =
               JL $ v(("durationMs"        |-> v(sd(TIME, START-TIME)),
                       "spanName"          |-> v(SPAN-ID),
                       "startTimeOffsetMs" |-> v(START-TIME),
                       MSV)) $ JL' .
 eq updateRoot(JL, SPAN-ID, TIME) = JL [owise] .
endfm