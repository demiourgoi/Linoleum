load json.maude

fmod LUEGO-SYNTAX is
 pr JSON .

 sorts Client CId LoadBalancer LuegoAPI Msg Queue Worker Sys Database DBContents RESTAPI .
 sorts Task TaskId TaskPair TaskList Result ClientTaskDB TaskPairList Log Clock .
 subsort Client Worker LoadBalancer LuegoAPI Msg Database Queue RESTAPI Log Clock < Sys .
 subsort Task < TaskList .
 subsort TaskPair < TaskPairList .
 subsort TaskPair < ClientTaskDB .

 *** System specification
 op none : -> Sys [ctor] .
 op __ : Sys Sys -> Sys [ctor assoc comm id: none] .

 *** Database for clients. Maps Task to TaskId
 op mtCTDB : -> ClientTaskDB [ctor] .
 op [_,_] : Task TaskId -> TaskPair [ctor] .
 op _,_ : ClientTaskDB ClientTaskDB -> ClientTaskDB [ctor assoc comm id: mtCTDB] .

 *** Clients and IDs
 op c : Nat -> CId [ctor] .
 op [_|_,_] : CId TaskList ClientTaskDB -> Client [ctor] .

 *** Tasks, pairs, lists, and queues
 op task : Nat -> Task [ctor] .
 op taskId : Nat -> TaskId [ctor] .

 op mtTL : -> TaskList [ctor] .
 op __ : TaskList TaskList -> TaskList [ctor assoc id: mtTL] .

 op mtTPL : -> TaskPairList [ctor] .
 op _;_ : TaskPairList TaskPairList -> TaskPairList [ctor assoc id: mtTPL] .

 op queue : TaskPairList -> Queue [ctor] .

 *** Workers
 op worker : TaskPairList -> Worker [ctor] .

 *** Load balancer
 op loadBalancer : -> LoadBalancer [ctor] .

 *** Luego API
 op lapi : -> LuegoAPI [ctor] .

 *** REST API
 op rapi : -> RESTAPI [ctor] .

 *** Database
 op mtDB : -> DBContents [ctor] .
 op [_,_] : TaskId Result -> DBContents [ctor] .
 op __ : DBContents DBContents -> DBContents [ctor assoc comm id: mtDB] .
 op db : DBContents Nat -> Database [ctor] .

 var  DBC : DBContents .
 vars R R' : Result .
 var  TID : TaskId .

 op addKey : DBContents TaskId ~> DBContents .
 ceq addKey(DBC, TID) = DBC [TID, noResult]
  if not contains(DBC, TID) .

 op add : DBContents TaskId Result -> DBContents .
 eq add([TID, R] DBC, TID, R') = [TID, R'] DBC .
 eq add(DBC, TID, R') = [TID, R'] DBC [owise] .

 op contains : DBContents TaskId -> Bool .
 eq contains([TID, R] DBC, TID) = true .
 eq contains(DBC, TID) = false [owise] .

 *** Results
 op noResult : -> Result [ctor] .
 op result : Nat -> Result [ctor] .

 *** Trace
 sort JL .
 subsort JSON < JL .

 op mtJL : -> JL [ctor] .
 op _$_ : JL JL -> JL [ctor assoc id: mtJL] .

 op log : JL ClientTaskDB -> Log [ctor] .

 *** Global time, time elapsed since last step, max
 op clock : Nat Nat Nat -> Clock [ctor] .

 *** Messages
 op request-tid : CId Task -> Msg [ctor] .
 op request-worker : Task TaskId -> Msg [ctor] .
 op taskIdAssigned : CId Task TaskId -> Msg [ctor] .
 op taskIdAssigned-lapi : CId Task TaskId -> Msg [ctor] .
 op add-database : TaskId -> Msg [ctor] .
 op work-done : TaskId Result -> Msg [ctor] .
 op work-done-db : TaskId Result -> Msg [ctor] .
endfm

fmod ID-HANDLING is
 pr LUEGO-SYNTAX .

 vars TRACE-ID SPAN-ID SPAN-NAME PARENT-ID CHILD-ID CHILD-ID' : String .
 vars START-TIME DURATION N N' : Nat .
 var  MSV : Map{String, Value} .
 var  T : Task .

 op mkTraceId : Task -> String [memo] .
 eq mkTraceId(task(N)) = "trace" + string(N, 10) .

 op mkRootId : Task -> String [memo] .
 eq mkRootId(task(N)) = "root" + string(N, 10) .

 op mkChildId : Task Nat -> String [memo] .
 eq mkChildId(task(N), N') = "child" + string(N, 10) + string(N', 10) .

 op createInitialTrace : Task Nat -> JL .
 ceq createInitialTrace(T, START-TIME) = createTrace(T, START-TIME) $
                                         createTraceChild(TRACE-ID, CHILD-ID, mkRootId(T), START-TIME) $
                                         createTraceChild(TRACE-ID, CHILD-ID', CHILD-ID, START-TIME)
  if TRACE-ID := mkTraceId(T) /\
     CHILD-ID := mkChildId(T, 1) /\
     CHILD-ID' := mkChildId(T, 11) .

 op createTrace : Task String Nat Nat Map{String, Value} -> JSON .
 ceq createTrace(T, SPAN-ID, START-TIME, DURATION, MSV) =
        createTrace(TRACE-ID, SPAN-ID, START-TIME, DURATION, MSV)
  if TRACE-ID := mkTraceId(T) .

 op createTrace : String String Nat Nat Map{String, Value} -> JSON .
 eq createTrace(TRACE-ID, SPAN-ID, START-TIME, DURATION, MSV) =
    v(("spanId"            |-> v(("traceId" |-> v(TRACE-ID),
                                  "spanId"  |-> v(SPAN-ID))),
       "spanName"          |-> v(SPAN-ID),
       "startTimeOffsetMS" |-> v(START-TIME),
       "durationMs"        |-> v(DURATION),
       "attributes"        |-> v(MSV))) .

 op createTrace : Task String Nat -> JSON .
 ceq createTrace(T, SPAN-ID, START-TIME) =
      createTrace(TRACE-ID, SPAN-ID, START-TIME)
  if TRACE-ID := mkTraceId(T) .


 op createTrace : String String Nat -> JSON .
 eq createTrace(TRACE-ID, SPAN-ID, START-TIME) =
    v(("spanId"            |-> v(("traceId" |-> v(TRACE-ID),
                                  "spanId"  |-> v(SPAN-ID))),
       "spanName"          |-> v(SPAN-ID),
       "startTimeOffsetMS" |-> v(START-TIME),
       "durationMs"        |-> v(0),
       "attributes"        |-> v("foo" |-> v("bar")))) .

 op createTrace : Task String Nat -> JSON .
 ceq createTrace(T, SPAN-ID, START-TIME) =
      createTrace(TRACE-ID, SPAN-ID, START-TIME)
  if TRACE-ID := mkTraceId(T) .

 op createTrace : Task Nat -> JSON .
 ceq createTrace(T, START-TIME) =
      createTrace(TRACE-ID, SPAN-ID, START-TIME)
  if TRACE-ID := mkTraceId(T) /\
     SPAN-ID := mkRootId(T) .

 op createTraceChild : Task Nat Nat Nat -> JSON .
 ceq createTraceChild(T, N, START-TIME, DURATION) =
      createTraceChild(TRACE-ID, SPAN-ID, PARENT-ID, START-TIME, DURATION)
  if TRACE-ID := mkTraceId(T) /\
     PARENT-ID := mkRootId(T) /\
     SPAN-ID := mkChildId(T, N) .

 op createTrace : String String Nat -> JSON .
 eq createTrace(TRACE-ID, SPAN-ID, START-TIME) =
    v(("spanId"            |-> v(("traceId" |-> v(TRACE-ID),
                                  "spanId"  |-> v(SPAN-ID))),
       "spanName"          |-> v(SPAN-ID),
       "startTimeOffsetMS" |-> v(START-TIME),
       "durationMs"        |-> v(0),
       "attributes"        |-> v("foo" |-> v("bar")))) .

 op createTraceChild : String String String Nat Nat -> JSON .
 eq createTraceChild(TRACE-ID, SPAN-ID, PARENT-ID, START-TIME, DURATION) =
    v(("spanId"            |-> v(("traceId" |-> v(TRACE-ID),
                                  "spanId"  |-> v(SPAN-ID))),
       "spanName"          |-> v(SPAN-ID),
       "parentId"          |-> v(PARENT-ID),
       "startTimeOffsetMS" |-> v(START-TIME),
       "durationMs"        |-> v(DURATION),
       "attributes"        |-> v("foo" |-> v("bar")))) .

 op createTraceChild : String String String Nat -> JSON .
 eq createTraceChild(TRACE-ID, SPAN-ID, PARENT-ID, START-TIME) =
    v(("spanId"            |-> v(("traceId" |-> v(TRACE-ID),
                                  "spanId"  |-> v(SPAN-ID))),
       "spanName"          |-> v(SPAN-ID),
       "parentId"          |-> v(PARENT-ID),
       "startTimeOffsetMS" |-> v(START-TIME),
       "durationMs"        |-> v(0),
       "attributes"        |-> v("foo" |-> v("bar")))) .
endfm

mod LUEGO-SEMANTICS is
 pr ID-HANDLING .
 pr COUNTER .
 pr RANDOM .

 vars CTDB LCTDB : ClientTaskDB .
 vars N TIME ELAPSED MAX : Nat .
 var  TPL : TaskPairList .
 var  DBC : DBContents .
 var  TL : TaskList .
 var  TID : TaskId .
 var  R : Result .
 var  JL : JL .
 var  CID : CId .
 var  T : Task .

 rl [request-reaches-balancer] :
    [CID | T TL, CTDB]
    *** loadBalancer
    lapi
    log(JL, LCTDB)
    clock(TIME, ELAPSED, MAX)
 => [CID | TL, CTDB]
    *** loadBalancer
    lapi
    request-tid(CID, T)
    log(JL $ createInitialTrace(T, TIME), LCTDB)
    clock(TIME + ELAPSED, random(counter) rem MAX, MAX) .

 rl [request-reaches-db] :
    request-tid(CID, T)
    db(DBC, N)
    log(JL, LCTDB)
    clock(TIME, ELAPSED, MAX)
 => db(addKey(DBC, taskId(N)), s(N))
    taskIdAssigned-lapi(CID, T, taskId(N))
    log(JL $ createTraceChild(T, 12, TIME, ELAPSED), (LCTDB, [T, taskId(N)]))
    clock(TIME + ELAPSED, random(counter) rem MAX, MAX)  .

 rl [taskId-reaches-balancer] :
    taskIdAssigned-lapi(CID, T, TID)
    *** loadBalancer
    lapi
    log(JL, LCTDB)
    clock(TIME, ELAPSED, MAX)
 => *** loadBalancer
    lapi
    taskIdAssigned(CID, T, TID)
    request-worker(T, TID)
    log(JL $ createTraceChild(T, 13, TIME, ELAPSED), LCTDB)
    clock(TIME + ELAPSED, random(counter) rem MAX, MAX) .

 rl [client-taskId-assigned] :
    taskIdAssigned(CID, T, TID)
    [CID | TL, CTDB]
    log(JL, LCTDB)
    clock(TIME, ELAPSED, MAX)
 => [CID | TL, (CTDB, [T, TID])]
    log(JL $ createTraceChild(T, 13, TIME, ELAPSED), LCTDB)
    clock(TIME + ELAPSED, random(counter) rem MAX, MAX) .

 rl [add-queue] :
    request-worker(T, TID)
    queue(TPL)
    log(JL, LCTDB)
    clock(TIME, ELAPSED, MAX)
 => queue([T, TID] ; TPL)
    log(JL $ createTraceChild(T, 13, TIME, ELAPSED), LCTDB)
    clock(TIME + ELAPSED, random(counter) rem MAX, MAX) .

 rl [worker-gets-task] :
    queue(TPL ; [T, TID])
    worker(mtTPL)
 => queue(TPL)
    worker([T, TID]) .

 rl [work-done] :
    worker([task(N), TID])
    rapi
 => worker(mtTPL)
    rapi
    work-done(TID, result(N)) .

 rl [work-done-lapi] :
    work-done(TID, result(N))
    lapi
 => lapi
    work-done-db(TID, result(N)) .

 rl [work-done-db] :
    work-done-db(TID, R)
    db(DBC, N)
 => db(add(DBC, TID, R), N) .
endm

mod TEST is
 pr LUEGO-SEMANTICS .

 op max : -> Nat .
 eq max = 10000 .

 op init : -> Sys .
 eq init = [c(0) | task(0) task(1) task(2), mtCTDB] *** Client 0, with three tasks
           [c(1) | task(3) task(4), mtCTDB]         *** Client 1, with two tasks
           *** loadBalancer                         *** Load balancer
           lapi                                     *** Luego API, initial counter for generating task IDs
           db(mtDB, 0)                              *** Database
           queue(mtTPL)                             *** Queue
           rapi                                     *** REST API
           worker(mtTPL)                            *** Worker 0
           worker(mtTPL)                            *** Worker 1
           log(mtJL, mtCTDB)                        *** Log
           clock(0, random(counter) rem max, max)   *** Clock
           .
endm

set print attribute on .

rew init .

eof

lapi
rapi
queue(mtTPL)
worker(mtTPL)
worker(mtTPL)
db([taskId(0), result(0)] [taskId(1), result(1)] [taskId(2), result(2)] [taskId(3), result(3)] [taskId(4), result(4)], 5)
log(v(("attributes" |-> v("foo" |-> v("bar")),
       "durationMs" |-> v(0),
       "spanId" |-> v(("spanId" |-> v("root0"),
                       "traceId" |-> v("trace0"))),
       "spanName" |-> v("root0"),
       "startTimeOffsetMS" |-> v(0))) $
    v(("attributes" |-> v("foo" |-> v("bar")),
       "durationMs" |-> v(0),
       "parentId" |-> v("root0"),
       "spanId" |-> v(("spanId" |-> v("child01"),
                       "traceId" |-> v("trace0"))),
       "spanName" |-> v("child01"),
       "startTimeOffsetMS" |-> v(0))) $
    v(("attributes" |-> v("foo" |-> v("bar")),
       "durationMs" |-> v(8239),
       "parentId" |-> v("root0"), "spanId"
    |-> v(("spanId" |-> v("child011"), "traceId" |-> v("trace0"))), "spanName" |-> v("child011"), "startTimeOffsetMS" |-> v(6044))) $ v(("attributes" |-> v("foo" |-> v("bar")),
    "durationMs" |-> v(0), "spanId" |-> v(("spanId" |-> v("root1"), "traceId" |-> v("trace1"))), "spanName" |-> v("root1"), "startTimeOffsetMS" |-> v(14283))) $ v(("attributes" |-> v(
    "foo" |-> v("bar")), "durationMs" |-> v(0), "parentId" |-> v("root1"), "spanId" |-> v(("spanId" |-> v("child11"), "traceId" |-> v("trace1"))), "spanName" |-> v("child11"),
    "startTimeOffsetMS" |-> v(14283))) $ v(("attributes" |-> v("foo" |-> v("bar")), "durationMs" |-> v(3760), "parentId" |-> v("root1"), "spanId" |-> v(("spanId" |-> v("child111"),
    "traceId" |-> v("trace1"))), "spanName" |-> v("child111"), "startTimeOffsetMS" |-> v(19216))) $ v(("attributes" |-> v("foo" |-> v("bar")), "durationMs" |-> v(0), "spanId" |-> v((
    "spanId" |-> v("root2"), "traceId" |-> v("trace2"))), "spanName" |-> v("root2"), "startTimeOffsetMS" |-> v(22976))) $ v(("attributes" |-> v("foo" |-> v("bar")), "durationMs" |-> v(0),
    "parentId" |-> v("root2"), "spanId" |-> v(("spanId" |-> v("child21"), "traceId" |-> v("trace2"))), "spanName" |-> v("child21"), "startTimeOffsetMS" |-> v(22976))) $ v(("attributes"
    |-> v("foo" |-> v("bar")), "durationMs" |-> v(8379), "parentId" |-> v("root2"), "spanId" |-> v(("spanId" |-> v("child211"), "traceId" |-> v("trace2"))), "spanName" |-> v("child211"),
    "startTimeOffsetMS" |-> v(31939))) $ v(("attributes" |-> v("foo" |-> v("bar")), "durationMs" |-> v(0), "spanId" |-> v(("spanId" |-> v("root3"), "traceId" |-> v("trace3"))), "spanName"
    |-> v("root3"), "startTimeOffsetMS" |-> v(40318))) $ v(("attributes" |-> v("foo" |-> v("bar")), "durationMs" |-> v(0), "parentId" |-> v("root3"), "spanId" |-> v(("spanId" |-> v(
    "child31"), "traceId" |-> v("trace3"))), "spanName" |-> v("child31"), "startTimeOffsetMS" |-> v(40318))) $ v(("attributes" |-> v("foo" |-> v("bar")), "durationMs" |-> v(8503),
    "parentId" |-> v("root3"), "spanId" |-> v(("spanId" |-> v("child311"), "traceId" |-> v("trace3"))), "spanName" |-> v("child311"), "startTimeOffsetMS" |-> v(45745))) $ v(("attributes"
    |-> v("foo" |-> v("bar")), "durationMs" |-> v(0), "spanId" |-> v(("spanId" |-> v("root4"), "traceId" |-> v("trace4"))), "spanName" |-> v("root4"), "startTimeOffsetMS" |-> v(54248))) $
    v(("attributes" |-> v("foo" |-> v("bar")), "durationMs" |-> v(0), "parentId" |-> v("root4"), "spanId" |-> v(("spanId" |-> v("child41"), "traceId" |-> v("trace4"))), "spanName" |-> v(
    "child41"), "startTimeOffsetMS" |-> v(54248))) $ v(("attributes" |-> v("foo" |-> v("bar")), "durationMs" |-> v(5683), "parentId" |-> v("root4"), "spanId" |-> v(("spanId" |-> v(
    "child411"), "traceId" |-> v("trace4"))), "spanName" |-> v("child411"), "startTimeOffsetMS" |-> v(57745))), [task(0), taskId(0)], [task(1), taskId(1)], [task(2), taskId(2)], [task(3),
    taskId(3)], [task(4), taskId(4)]) [c(0) | mtTL, [task(0), taskId(0)], [task(1), taskId(1)], [task(2), taskId(2)]] [c(1) | mtTL, [task(3), taskId(3)], [task(4), taskId(4)]] clock(
    63428, 4101, 10000)